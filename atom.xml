<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cansolve.github.io/"/>
  <updated>2018-12-14T07:26:24.000Z</updated>
  <id>http://cansolve.github.io/</id>
  
  <author>
    <name>tongxiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>viewport-fit解决iPhone X、XS、XS Max、XR刘海屏问题</title>
    <link href="http://cansolve.github.io/2018/10/10/daily2/"/>
    <id>http://cansolve.github.io/2018/10/10/daily2/</id>
    <published>2018-10-10T03:28:29.000Z</published>
    <updated>2018-12-14T07:26:24.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 18 2018 17:18:47 GMT+0800 (CST) --><h4 id="一次活动页面发现的iPhone-X、XS、XS-Max、XR刘海屏问题"><a href="#一次活动页面发现的iPhone-X、XS、XS-Max、XR刘海屏问题" class="headerlink" title="一次活动页面发现的iPhone X、XS、XS Max、XR刘海屏问题"></a>一次活动页面发现的iPhone X、XS、XS Max、XR刘海屏问题</h4><p>起因：游戏内嵌内嵌H5页面，提供的webview容器是全屏的，所以H5页面要处理以上设备的刘海问题【烦】。</p><p>尺寸了解我这里就不写了，尺寸问题我就不写了，<a href="https://blog.csdn.net/qq_33608748/article/details/82769570" target="_blank" rel="noopener">顶楼电梯</a></p><p>iPhone X 配备一个覆盖整个手机的全面屏,顶部的“刘海”突出来使得网站被限制在一个“安全区域”,在两侧边缘会出现白条儿。移除这个白条儿也不难,给 body 设置一个 background-color 就可以搞定。</p><p>但是我们内嵌的游戏页面背景色有时候不好设置背景色为纯色，另一种方法就是添加 viewport-fit=cover meta 标签,将整个网站扩展到整个屏幕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;</span><br></pre></td></tr></table></figure><p>iPhone XS等手机还未发布之前，我们也是跟着学做已经做一些兼容来搞定iPhoneX。</p><p>这里只是横屏代码，竖屏同理；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var isIPhoneX = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 375 &amp;&amp; window.screen.width === 812;</span><br></pre></td></tr></table></figure><p>这里我们判断如果是iPhone X，把顶部增加高度30px的容器垫高，避开刘海头区域，各种方式都可以padding-left、absolute、margin-left。。。你能想到的方法都可以，这样标题正好避开刘海头。</p><p>因为自己当时还没有用iPhone X，只知道iPhone X有刘海头，不知道其他细节问题。</p><p>又到一年一度的9月份，苹果发布了3X机系列，有同事在Mac下的iPhone模拟器访问，发现这个页面iPhone XS Max下有问题。看了一下上面文章发现尺寸不一样，当初只判断了iPhone X加垫高，其他几个机型都未判断，所以就很自然的写了新机型，加上判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// iPhone X、iPhone XS</span><br><span class="line">var isIPhoneX = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 375 &amp;&amp; window.screen.width === 812;</span><br><span class="line">// iPhone XS Max</span><br><span class="line">var isIPhoneXSMax = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 414 &amp;&amp; window.screen.width === 896;</span><br><span class="line">// iPhone XR</span><br><span class="line">var isIPhoneXR = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 2 &amp;&amp; window.screen.height === 414 &amp;&amp; window.screen.width === 896;</span><br></pre></td></tr></table></figure><p>原来代码是if(isIPhoneX)垫高，现在改成if(isIPhoneX || isIPhoneXSMax || isIPhoneXR)垫高。</p><p>这里有个坑，官方提供的安全区域代码constant(safe-area-inset-top) env(safe-area-inset-top)，使用后都在刘海头下面，如图（黑灰色区域状态栏）：</p><p><img src="http://ons.me/wp-content/uploads/2018/10/4.jpg" alt=""></p><p>当初没有用安全区域代码，一方面是因为页面有悬浮容器，会悬浮到安全区域外部，兼容页面正文麻烦，另一方面就是正文内容靠下，离刘海头有一段距离，感觉太丑干脆不用。</p><p>总结：依旧不用安全区域代码，如果要做刘海头，if(isIPhoneX || isIPhoneXSMax || isIPhoneXR) 垫高44px。</p><p>备注：iPhone X、iPhone XS、iPhone XS Max刘海头高度30px，iPhone XR刘海头高度33px。本文提到的30px、33px、44px，均为initial-scale=1下，px是在通用属性下，用rem写页面的请自行转换。设计稿像素应该都需要乘以2倍或3倍。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 18 2018 17:18:47 GMT+0800 (CST) --&gt;&lt;h4 id=&quot;一次活动页面发现的iPhone-X、XS、XS-Max、XR刘海屏问题&quot;&gt;&lt;a href=&quot;#一次活动页面发现的iPhone-X、XS、XS-Ma
      
    
    </summary>
    
      <category term="个人" scheme="http://cansolve.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="移动端" scheme="http://cansolve.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>移动端滚动事件overflow-y:scroll使用心得</title>
    <link href="http://cansolve.github.io/2018/09/18/daily4/"/>
    <id>http://cansolve.github.io/2018/09/18/daily4/</id>
    <published>2018-09-18T07:45:43.000Z</published>
    <updated>2018-12-18T08:06:30.332Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 18 2018 17:18:47 GMT+0800 (CST) --><blockquote><p>作者：夏大师</p><p><a href="https://www.cnblogs.com/xiahj/p/8036419.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiahj/p/8036419.html</a></p></blockquote><h2 id="1-webkit-overflow-scrolling-touch是什么？"><a href="#1-webkit-overflow-scrolling-touch是什么？" class="headerlink" title="1. -webkit-overflow-scrolling:touch是什么？"></a>1. -webkit-overflow-scrolling:touch是什么？</h2><p>MDN上是这样定义的：</p><blockquote><p><code>-webkit-overflow-scrolling</code>属性控制元素在移动设备上是否使用滚动回弹效果.<br><code>auto</code>: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。<br><code>touch</code>: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。</p></blockquote><p>在移动端上，在你用<code>overflow-y:scorll</code>属性的时候，你会发现滚动的效果很木，很慢，这时候可以使用<code>-webkit-overflow-scrolling:touch</code>这个属性，让滚动条产生<strong>滚动回弹</strong>的效果，就像ios原生的滚动条一样流畅。</p><h2 id="2-解决safari布局抖动的例子"><a href="#2-解决safari布局抖动的例子" class="headerlink" title="2. 解决safari布局抖动的例子"></a>2. 解决safari布局抖动的例子</h2><p><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103503613-582028000.png" alt=""></p><p><strong>想实现一个布局为header、main、bottom的布局，其中头部和底部通过fixed固定，中间部分通过滚动条滑动。</strong></p><p>如果目的是实现只要中间的内容超过屏幕高度时，中间内容会自动滚动的效果的话，<code>main</code>部分加上上下的<code>padding</code>，然后不需要自己添加任何滚动条属性，当超出高度时，<code>body</code>会自动产生滚动条。这样我们的目的其实是实现了的。</p><p>但是在<strong>safari</strong>上，当超出高度，页面往下滑时，浏览器底部的工具栏<strong>会随着页面一起晃动</strong>（向下滚动时会拉起底部工具栏），造成了很不好的体验。所以我们想在中间的<code>main</code>部分加一个<strong>独立的滚动条</strong>。</p><h3 id="2-1-方案一"><a href="#2-1-方案一" class="headerlink" title="2.1 方案一"></a>2.1 方案一</h3><p>在main上使用fixed定位，加上overflow-y属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.main &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 50px;</span><br><span class="line">    bottom: 50px;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过不推荐这个fixed方案，因为页面偶尔卡住不动，下面说到了这个问题。</p><h3 id="2-2-方案二"><a href="#2-2-方案二" class="headerlink" title="2.2 方案二"></a>2.2 方案二</h3><p>中间的<strong>main不设定位</strong>，<strong>高度100%</strong>，再<strong>padding头部和尾部</strong>，</p><p>其中头部和底部的定位设为<code>absolute</code>会比设为<code>fixed</code>体验更好（况且fix布局在移动端本来就有各种各样的问题，还是尽量避开:) ）。</p><p>大致代码如下，仍是<code>overflow-y</code>和<code>-webkit-overflow-scrolling</code>，重点在于中间部分依照文本流布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">html, body &#123;</span><br><span class="line"> height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">main &#123;</span><br><span class="line">    padding: 50px 0;</span><br><span class="line">    height: 100%;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">    -webkit-overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-探究-webkit-overflow-scrolling-touch偶尔卡住或不能滑动的bug"><a href="#3-探究-webkit-overflow-scrolling-touch偶尔卡住或不能滑动的bug" class="headerlink" title="3. 探究-webkit-overflow-scrolling:touch偶尔卡住或不能滑动的bug"></a>3. 探究-webkit-overflow-scrolling:touch偶尔卡住或不能滑动的bug</h2><p>-webkit-overflow-scrolling:touch这个属性真的是各种坑，我研究这个属性已经大半年了，还没有发现能够在safari上完美使用无bug的例子。</p><blockquote><p>最常见的例子就是，</p><ul><li><p>在safari上，使用了<code>-webkit-overflow-scrolling:touch</code>之后，页面偶尔会卡住不动。</p></li><li><p>在safari上，点击其他区域，再在滚动区域滑动，滚动条无法滚动的bug。</p></li><li><p>通过动态添加内容撑开容器，结果根本不能滑动的bug。</p></li></ul></blockquote><p>在网上也看到了一些人在问这个问题，不过不多，国外倒是讨论的更多一点，描述如下。</p><p><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103539816-1960538934.png" alt=""><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103539816-1960538934.png" alt=""></p><p>偶尔卡住的问题，解决方案网上众说纷纭，遇到了很多相同的说法，比如如果卡住不动的话，就加一个<code>z-index</code>，就能解决该问题的说法。</p><p>在试了很多次之后，这种说法没有一次解决过这个问题。这个说法能够传播出来，可能是使用者当时在使用的时候遇到了<code>-webkit-overflow-scrolling:touch</code>点透或者层级的问题。所以该方案不具有适用性。</p><p>所以这个东西真的让我很苦恼了很久，以致于那段时间所有的滚动条不是通过body自己滚动，就是使用iScroll这样的库，繁琐地让我几乎想要放弃移动web，拥抱hybrid，不过在stackoverflow潜水了很久之后，总结了以下几种解决方案：</p><h3 id="3-1-保证使用了该属性的元素上没有设置定位"><a href="#3-1-保证使用了该属性的元素上没有设置定位" class="headerlink" title="3.1 保证使用了该属性的元素上没有设置定位"></a>3.1 保证使用了该属性的元素上没有设置定位</h3><p>如果出现偶尔卡住不动的情况，那么在使用该属性的元素上<strong>不设置定位</strong>或者手动设置定位为<strong><code>static</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">position: static</span><br></pre></td></tr></table></figure><p>这样会解决<strong>部分</strong>因为定位(relative、fixed、absolute)导致的页面偶尔不能滚动的bug。</p><blockquote><p>但是滑动到顶部继续手指往下滑，或者到底部继续往上滑，还是会触发卡住的问题（其实是整个页面上下回弹），说他算bug，其实就是ios8以上的特性，如果滚动区域大一点，用户不会觉得这是bug，如果小了，用户会不知道发生了什么而卡住了。<br>视频在这，有梯子的同学可以看一看<a href="https://www.youtube.com/watch?v=MkAVYbO_joo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=MkAVYbO_joo</a>。</p></blockquote><h3 id="3-2-如果添加动态内容页面不能滚动，让子元素height-1"><a href="#3-2-如果添加动态内容页面不能滚动，让子元素height-1" class="headerlink" title="3.2 如果添加动态内容页面不能滚动，让子元素height+1"></a>3.2 如果添加动态内容页面不能滚动，让子元素height+1</h3><p>如果在<code>-webkit-overflow-scrolling:touch</code>属性的元素上，想通过<strong>动态添加内容</strong>来撑开容器，触发滚动，是有bug 的，页面是会卡住不动的。</p><p>国内没有人讨论这个问题，国外倒是很多，例如下面的描述：</p><p><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103630754-707308829.png" alt=""><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103630754-707308829.png" alt=""></p><p>收集了很多资料，用了之后，下面的方法真正的解决了我的问题，真是直呼神奇，方案如下图：</p><p>图一：</p><p><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103636379-1667026180.png" alt=""><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103636379-1667026180.png" alt=""></p><p>图二：</p><p><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103640113-1071673514.png" alt=""><img src="https://images2017.cnblogs.com/blog/1294929/201712/1294929-20171214103640113-1071673514.png" alt=""></p><p>方法就是在<code>webkit-overflow-scrolling:touch</code>属性的<strong>下一层子元素</strong>上，将<strong>height加1%或1px</strong>。从而<strong>主动触发scrollbar</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main-inner &#123;</span><br><span class="line">    min-height: calc(100% + 1px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以直接加伪元素上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main:after &#123;</span><br><span class="line">    min-height: calc(100% + 1px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方案不得不说真的好用。。</p><p>当然还有其他方案，不过要写js或者jq了，麻烦。</p><h3 id="3-3-为什么会有卡住不动的这个bug"><a href="#3-3-为什么会有卡住不动的这个bug" class="headerlink" title="3.3 为什么会有卡住不动的这个bug"></a>3.3 为什么会有卡住不动的这个bug</h3><p>这个bug产生于ios8以上（不十分肯定，但在ios5~7上需要手动使用translateZ(0)打开硬件加速）</p><p><code>Safari</code>对于<code>overflow-scrolling</code>用了原生控件来实现。对于有<code>-webkit-overflow-scrolling</code>的网页，会创建一个<code>UIScrollView</code>，提供子<code>layer</code>给渲染模块使用。</p><p>我想说作为一个苦逼的前端只能解决到这了。</p><h2 id="4-webkit-overflow-scrolling-touch的其他坑"><a href="#4-webkit-overflow-scrolling-touch的其他坑" class="headerlink" title="4. -webkit-overflow-scrolling:touch的其他坑"></a>4. -webkit-overflow-scrolling:touch的其他坑</h2><p>除此之外，这个属性还有很多bug，包括且不限于以下几种：</p><blockquote><ul><li><p>滚动中 scrollTop 属性不会变化</p></li><li><p>手势可穿过其他元素触发元素滚动</p></li><li><p>滚动时暂停其他 transition</p></li></ul></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 18 2018 17:18:47 GMT+0800 (CST) --&gt;&lt;blockquote&gt;&lt;p&gt;作者：夏大师&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xiahj/p/8036419.html
      
    
    </summary>
    
      <category term="分享" scheme="http://cansolve.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="移动端" scheme="http://cansolve.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>基于react + bootstrap 的 react-admin</title>
    <link href="http://cansolve.github.io/2018/09/14/daily3/"/>
    <id>http://cansolve.github.io/2018/09/14/daily3/</id>
    <published>2018-09-14T07:52:19.000Z</published>
    <updated>2018-12-18T09:16:49.973Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 18 2018 17:18:47 GMT+0800 (CST) --><p><img src="/2018/09/14/daily3/WechatIMG10.jpeg" alt="效果图 1"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此 react-admin 项目是基于 bootstrap-ace 框架之上，用 react 全家桶 + bootstrap 的进行再次开发的，项目已经开源，项目地址在 github 上。</p><p>框架效果预览 <a href="http://www.pydyun.com/other/ace/index.html" target="_blank" rel="noopener">http://www.pydyun.com/other/ace/index.html</a><br>github地址 <a href="https://github.com/cansolve/react-manage" target="_blank" rel="noopener">github</a></p><h2 id="1-后台管理主要项目结构"><a href="#1-后台管理主要项目结构" class="headerlink" title="1. 后台管理主要项目结构"></a>1. 后台管理主要项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">demo //项目名</span><br><span class="line">  -- dist  //预编译，自动构建之后会生成的文件，默认初始化是没有当前这个文件</span><br><span class="line">  -- asserts  //静态资源目录，css,font,image</span><br><span class="line">  -- public  //html模板文件</span><br><span class="line">  -- webpack  //webpack配置文件</span><br><span class="line">    -- webpack.base.config.js  //公用</span><br><span class="line">    -- webpack.dev.config.js  //开发环境</span><br><span class="line">    -- webpack.prod.config.js  //生产环境</span><br><span class="line">  -- src  //js编写文件</span><br><span class="line">      -- index.js  // 初始化js</span><br><span class="line">      -- module  // 基础UI模块目录</span><br><span class="line">      -- tools   // js方法工具库目录</span><br><span class="line">      -- action     // action 目录</span><br><span class="line">      -- component  // 对应的模块 目录</span><br><span class="line">      -- dispatch   // dispatch 目录</span><br><span class="line">      -- reducers   // reducers 目录</span><br><span class="line">      -- index.js   // 前端渲染</span><br><span class="line">      -- router.js  // 前端路由</span><br><span class="line">      -- store.js   // store 文件 </span><br><span class="line">  -- .babelr   //babel的校验文件</span><br><span class="line">  -- .eslintrc  //js编写校验配置文件</span><br><span class="line">  -- .gitignore  //git过滤文件</span><br><span class="line">  -- package.json  //node 安装包文件</span><br><span class="line">  -- README.md   //readme 文件</span><br></pre></td></tr></table></figure><h2 id="2-本地必须要有node和git环境"><a href="#2-本地必须要有node和git环境" class="headerlink" title="2. 本地必须要有node和git环境"></a>2. 本地必须要有<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node</a>和<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>环境</h2><ul><li>webpack 4</li><li>bootstrap + ace</li><li>react 16</li><li>react-router 4</li><li>redux 3</li><li>babel</li><li>promise</li><li>async + await</li></ul><hr><h2 id="3-项目开始"><a href="#3-项目开始" class="headerlink" title="3. 项目开始"></a>3. 项目开始</h2><p>先在对应的git先创建git仓库，比如：XX管理后台 <code>demo</code> 项目，然后 <code>git clone</code> 到本来的开发环境，进入当前项目目录，代码如入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://git@github.com:cansolve/react-manage.git</span><br><span class="line">cd demo</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd demo</span><br><span class="line">git remote add origin ssh://git@github.com:cansolve/react-manage.git</span><br></pre></td></tr></table></figure><p>这时，通过git来添加前端开发初始化的工程目录，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add base ssh://git@github.com:cansolve/react-manage.git</span><br><span class="line">git pull base master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>然后可以推送到开发项目上面去，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;前端项目初始化&apos;</span><br><span class="line">git push origin demo</span><br></pre></td></tr></table></figure><p>到此，你的 <code>demo</code> 项目前端搭建和初始化已完毕，接下来你就可以开始 前端开发 了</p><hr><h2 id="4-本地项目开始"><a href="#4-本地项目开始" class="headerlink" title="4. 本地项目开始"></a>4. 本地项目开始</h2><p>先安装编译第三方的依赖包<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果开发之前本地没有对应的server服务器，也可以用node搭个server服务器，默认是8080端口:127.0.0.1:8080,如果有的话，直接跳过这一步</span><br><span class="line">npm install -g http-server</span><br><span class="line">http-server -c-1</span><br></pre></td></tr></table></figure><h3 id="4-1-开发环境"><a href="#4-1-开发环境" class="headerlink" title="4.1 开发环境"></a>4.1 开发环境</h3><p>生产环境中开发监听对应的文件修改<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p></p><h3 id="4-2-生产环境"><a href="#4-2-生产环境" class="headerlink" title="4.2 生产环境"></a>4.2 生产环境</h3><p>压缩生产对应的线上文件，生产 <code>html</code> <code>css</code> <code>image</code> <code>font</code> <code>js</code> 文件<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="4-3-前端的升级和更新"><a href="#4-3-前端的升级和更新" class="headerlink" title="4.3 前端的升级和更新"></a>4.3 前端的升级和更新</h3><p>后续当前项目的前端库升级，bug修复，版本更新，直接可以通过命令来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull base master</span><br></pre></td></tr></table></figure><p>如有改动跟本地开发的导致冲突，请手动处理冲突文件，然后push到对应项目中去。</p><h2 id="5-项目组建介绍"><a href="#5-项目组建介绍" class="headerlink" title="5. 项目组建介绍"></a>5. 项目组建介绍</h2><h4 id="5-1-表格组建"><a href="#5-1-表格组建" class="headerlink" title="5.1 表格组建"></a>5.1 表格组建</h4><p><img src="/2018/09/14/daily3/WechatIMG9.jpeg" alt="效果图 2"><br>说明：这里表格已经写成组建形式，只需要传入对应的title及data <strong>后台获取数据</strong> 即可渲染成表格，对应的可以选择排序、勾选、包括给详情加a标签功能;</p><h4 id="5-2-分页组建"><a href="#5-2-分页组建" class="headerlink" title="5.2 分页组建"></a>5.2 分页组建</h4><p><img src="/2018/09/14/daily3/WechatIMG8.jpeg" alt="效果图 2"><br>说明：分页组建，点击传入对应页码，支持输入跳转;</p><h4 id="5-3-日历组建"><a href="#5-3-日历组建" class="headerlink" title="5.3 日历组建"></a>5.3 日历组建</h4><p><img src="/2018/09/14/daily3/WechatIMG7.jpeg" alt="效果图 2"><br>说明：日历时间选择组建，点击展示日期列表，选择传给后台为时间戳格式;</p><h4 id="5-4-下拉选择组建"><a href="#5-4-下拉选择组建" class="headerlink" title="5.4 下拉选择组建"></a>5.4 下拉选择组建</h4><p><img src="/2018/09/14/daily3/WechatIMG6.jpeg" alt="效果图 2"><br>说明：点击出现下拉框，支持搜索功能</p><h4 id="5-4-下拉选择【多选】组建"><a href="#5-4-下拉选择【多选】组建" class="headerlink" title="5.4 下拉选择【多选】组建"></a>5.4 下拉选择【多选】组建</h4><p><img src="/2018/09/14/daily3/WechatIMG5.jpeg" alt="效果图 2"><br>说明：点击出现下拉框，多选功能</p><h4 id="5-4-树组建"><a href="#5-4-树组建" class="headerlink" title="5.4 树组建"></a>5.4 树组建</h4><p><img src="/2018/09/14/daily3/WechatIMG4.jpeg" alt="效果图 2"><br>说明：传入对应的数据即可渲染成树</p><h4 id="5-4-双向选择组建"><a href="#5-4-双向选择组建" class="headerlink" title="5.4 双向选择组建"></a>5.4 双向选择组建</h4><p><img src="/2018/09/14/daily3/WechatIMG3.jpeg" alt="效果图 2"><br>说明：两边数据可以互通选择，支持一键全部选择，两边数据都支持搜索功能；</p><h5 id="具体使用api在组建里面已经写的比较详细，类似下图，再有不明白的可以联系我，一起进步；"><a href="#具体使用api在组建里面已经写的比较详细，类似下图，再有不明白的可以联系我，一起进步；" class="headerlink" title="具体使用api在组建里面已经写的比较详细，类似下图，再有不明白的可以联系我，一起进步；"></a>具体使用api在组建里面已经写的比较详细，类似下图，再有不明白的可以联系我，一起进步；</h5><p><img src="/2018/09/14/daily3/WechatIMG11.jpeg" alt="效果图 2"></p><h2 id="5-最后"><a href="#5-最后" class="headerlink" title="5. 最后"></a>5. 最后</h2><p>因为这是本人自己依据creat-react-app搭建的，跟公司项目目录还是有一定区别的，包括本人写代码的一些不好的地方还请多指正。<br>大神请绕道，放小弟一条生路，谢谢啦！！<br>本人公众号 <strong>码上关注</strong> 不定期分享一些前端知识，一起相互交流学习。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 18 2018 17:18:47 GMT+0800 (CST) --&gt;&lt;p&gt;&lt;img src=&quot;/2018/09/14/daily3/WechatIMG10.jpeg&quot; alt=&quot;效果图 1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="个人" scheme="http://cansolve.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="react" scheme="http://cansolve.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo + github搭建自己的博客</title>
    <link href="http://cansolve.github.io/2018/04/02/daily1/"/>
    <id>http://cansolve.github.io/2018/04/02/daily1/</id>
    <published>2018-04-02T11:25:46.000Z</published>
    <updated>2018-12-14T07:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 18 2018 17:18:47 GMT+0800 (CST) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>这是我第一次写这种类型的博客，也不叫什么博客，纯粹个人一些踩坑过程罢了，原先弄的前后端分离的开发流程想想太复杂，一个博客页面没啥必要，主要还是记录自己的一些心得，内容比较重要。话不多说，开搞！！！</p><h2 id="基于node和git"><a href="#基于node和git" class="headerlink" title="基于node和git"></a>基于node和git</h2><p>安装<a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js</a>和<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a><br>这个就不多说了，贴个地址</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a><strong>快速开始</strong></h2><p>1、找个文件夹下打开终端,输入</p><pre><code>hexo i blogName //blog是项目名cd blogName //切换到站点根目录hexo g //generetor的缩写hexo s //server的缩写</code></pre><p>2 打开浏览器输入localhost:4000查看：<br><img src="https://cansolve.cn/20161115143629057.jpg" alt="local" title="localhost:4000"></p><p>看到这个样子就说明成功了，这个就是hexo默认的博客主题。现在你已经可以在这个主题下写博客了。<br>你还可以选择博客的主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">theme</a></p><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a><strong>选择主题</strong></h2><p>我选的是Claudia</p><p>1 . 在站点根目录输入</p><pre><code>git clone https://github.com/Haojen/hexo-theme-Claudia.git</code></pre><p>2 . 完成后，打开根目录下的 _config.yml 文件， 找到 theme 字段，把landscape改为 Claudia<br><img src="https://cansolve.cn/2018112110001.png" alt="theme" title="theme"></p><p>3 . 在终端输入</p><pre><code>hexo clean  //清除缓存hexo g  //重新生成代码hexo s  //部署到本地//然后打开浏览器访问 localhost:4000 查看效果</code></pre><p><img src="https://cansolve.cn/201812110002.png" alt="theme" title="theme"><br>这时候主题已经换了，主题里面的修改项自行查阅一下，很多都有注释</p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a><strong>上传到github</strong></h2><p>没有github账号的，自行注册一个【很少人没有吧】</p><p><img src="https://cansolve.cn/201812110003.png" alt="theme" title="theme"><br>完了继续下一步选择一个主题</p><p><img src="https://cansolve.cn/201812110004.jpg" alt="theme" title="theme"><br>结束访问 xxxxx.github.io 会看到上面一样的页面</p><p>修改文件<br><img src="https://cansolve.cn/201812110005.png" alt="theme" title="theme"></p><pre><code>注意！！！冒号的后面一定一定一定要有一个空格！！</code></pre><p>开始部署</p><pre><code>npm install hexo-deployer-git --save//先装个插件hexo d  //  部署的命令</code></pre><p>网上有的教程说需要账号密码，我这边没遇到，所以就不方便截图了</p><h2 id="发布第一篇博客"><a href="#发布第一篇博客" class="headerlink" title="发布第一篇博客"></a><strong>发布第一篇博客</strong></h2><p>根目录下输入 ：</p><pre><code>hexo new &quot;postName&quot;//hexo n 也可以 //你自己的博客名称，名为postName.md的文件会建在目//录/blog/source/_posts下。</code></pre><p>文章编辑完成后，终端在根目录文件夹下，执行如下命令来发布:</p><pre><code>hexo g //生成静态页面，类似于打个包hexo d //发布</code></pre><p>这样就可以发布咯</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 18 2018 17:18:47 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/
      
    
    </summary>
    
      <category term="个人" scheme="http://cansolve.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="建站" scheme="http://cansolve.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>

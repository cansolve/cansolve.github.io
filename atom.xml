<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cansolve.github.io/"/>
  <updated>2018-12-14T09:37:55.000Z</updated>
  <id>http://cansolve.github.io/</id>
  
  <author>
    <name>tongxiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于react + bootstrap 的 react-admin</title>
    <link href="http://cansolve.github.io/2018/12/14/daily3/"/>
    <id>http://cansolve.github.io/2018/12/14/daily3/</id>
    <published>2018-12-14T07:52:19.000Z</published>
    <updated>2018-12-14T09:37:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Dec 17 2018 15:06:53 GMT+0800 (CST) --><p><img src="https://upload-images.jianshu.io/upload_images/12890819-f3b950acbffb944b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图 2"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此 react-admin 项目是基于 <a href="https://pro.ant.design/index-cn" target="_blank" rel="noopener">蚂蚁金服开源的 ant design pro</a> 之上，用 react 全家桶 + bootstrap 的进行再次开发的，项目已经开源，项目地址在 github 上。</p><p>效果预览 <a href="https://preview.pro.ant.design/user/login" target="_blank" rel="noopener">https://preview.pro.ant.design/user/login</a></p><h1 id="1-后台管理"><a href="#1-后台管理" class="headerlink" title="1. 后台管理"></a>1. 后台管理</h1><h2 id="1-1-已经实现功能"><a href="#1-1-已经实现功能" class="headerlink" title="1.1 已经实现功能"></a>1.1 已经实现功能</h2><ul><li style="list-style:none"><input type="checkbox" checked> 登录</li><li style="list-style:none"><input type="checkbox" checked> 文章管理</li><li style="list-style:none"><input type="checkbox" checked> 标签管理</li><li style="list-style:none"><input type="checkbox" checked> 留言管理</li><li style="list-style:none"><input type="checkbox" checked> 用户管理</li><li style="list-style:none"><input type="checkbox" checked> 友情链接管理</li><li style="list-style:none"><input type="checkbox" checked> 时间轴管理</li><li style="list-style:none"><input type="checkbox" checked> 富文本编辑器（支持 MarkDown 语法）</li></ul><h2 id="1-2-待实现功能"><a href="#1-2-待实现功能" class="headerlink" title="1.2 待实现功能"></a>1.2 待实现功能</h2><ul><li style="list-style:none"><input type="checkbox"> 点赞、留言和评论 的通知管理</li><li style="list-style:none"><input type="checkbox"> 评论管理</li><li style="list-style:none"><input type="checkbox"> 个人中心（用来设置博主的各种信息）</li><li style="list-style:none"><input type="checkbox"> 工作台（ 接入百度统计接口，查看网站浏览量和用户访问等数据 ）</li></ul><h1 id="2-主要项目结构"><a href="#2-主要项目结构" class="headerlink" title="2. 主要项目结构"></a>2. 主要项目结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- pages</span><br><span class="line">  - Account 博主个人中心</span><br><span class="line">  - article 文章管理</span><br><span class="line">  - Category 分类</span><br><span class="line">  - Dashboard 工作台</span><br><span class="line">  - Exection 403 404 500 等页面</span><br><span class="line">  - Link 链接管理</span><br><span class="line">  - Message 留言管理</span><br><span class="line">  - OtherUser 用户管理</span><br><span class="line">  - Tag 标签管理</span><br><span class="line">  - TimeAsix 时间轴</span><br><span class="line">  - User 登录注册管理</span><br></pre></td></tr></table></figure><p>文章管理、用户管理、留言等 具体业务需求，都是些常用的逻辑可以实现的，也很简单，这里就不展开讲了。</p><h1 id="3-添加富文本编辑器，同样支持-markdown-语法"><a href="#3-添加富文本编辑器，同样支持-markdown-语法" class="headerlink" title="3. 添加富文本编辑器，同样支持 markdown 语法"></a>3. 添加富文本编辑器，同样支持 markdown 语法</h1><p>添加的编辑器为 <a href="https://github.com/sparksuite/simplemde-markdown-editor" target="_blank" rel="noopener">simplemde-markdown-editor</a></p><p>效果图</p><p><img src="https://user-images.githubusercontent.com/24362914/49021611-01c45080-f1ce-11e8-988a-8c1064a448de.png" alt="效果图1"></p><p>参考的文章为 <a href="https://segmentfault.com/a/1190000010616632" target="_blank" rel="noopener">react 搭建博客—支持markdown的富文本编辑器</a></p><h1 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h1><p>使用详情请查看 <a href="https://pro.ant.design/docs/getting-started-cn" target="_blank" rel="noopener">Ant Design Pro </a>，因为本项目也是在这个基础之上，按这个规范来构建的。</p><h1 id="5-缺点"><a href="#5-缺点" class="headerlink" title="5. 缺点"></a>5. 缺点</h1><p>开发时，程序出错后，修改正确后，webpack 有时不会及时查觉到内容已经更改，从而不能及时编译，要重新运行命令打包。</p><h1 id="6-项目地址"><a href="#6-项目地址" class="headerlink" title="6. 项目地址"></a>6. 项目地址</h1><p>开源不易，如果觉得该项目不错或者对你有所帮助，欢迎到 github 上给个 star，谢谢。</p><p><strong>项目地址：</strong></p><blockquote><p><a href="https://github.com/biaochenxuying/blog-react" target="_blank" rel="noopener">前台展示: https://github.com/biaochenxuying/blog-react</a></p></blockquote><blockquote><p><a href="https://github.com/biaochenxuying/blog-react-admin" target="_blank" rel="noopener">管理后台：https://github.com/biaochenxuying/blog-react-admin</a></p></blockquote><blockquote><p><a href="https://github.com/biaochenxuying/blog-node" target="_blank" rel="noopener">后端：https://github.com/biaochenxuying/blog-node</a></p></blockquote><blockquote><p><a href="https://github.com/biaochenxuying/blog" target="_blank" rel="noopener">blog：https://github.com/biaochenxuying/blog</a></p></blockquote><p><strong>本博客系统的系列文章：</strong></p><ul><li><ol><li><a href="http://biaochenxuying.cn/articleDetail?article_id=5bf57a8f85e0f13af26e579b" target="_blank" rel="noopener">react + node + express + ant + mongodb 的简洁兼时尚的博客网站</a></li></ol></li><li><ol start="2"><li><a href="http://biaochenxuying.cn/articleDetail?article_id=5bf6bb5e85e0f13af26e57b7" target="_blank" rel="noopener">react + Ant Design + 支持 markdown 的 blog-react 项目文档说明</a></li></ol></li><li><ol start="3"><li><a href="http://biaochenxuying.cn/articleDetail?article_id=5bf8c57185e0f13af26e7d0d" target="_blank" rel="noopener">基于 node + express + mongodb 的 blog-node 项目文档说明</a></li></ol></li><li><ol start="4"><li><a href="http://biaochenxuying.cn/articleDetail?article_id=5bfa728bb54f044b4f9da240" target="_blank" rel="noopener">服务器小白的我,是如何将node+mongodb项目部署在服务器上并进行性能优化的</a></li></ol></li></ul><h1 id="7-Build-Setup-构建安装"><a href="#7-Build-Setup-构建安装" class="headerlink" title="7. Build Setup ( 构建安装 )"></a>7. Build Setup ( 构建安装 )</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># install dependencies</span><br><span class="line">npm install </span><br><span class="line"></span><br><span class="line"># serve with hot reload at localhost: 3000</span><br><span class="line">npm start </span><br><span class="line"></span><br><span class="line"># build for production with minification</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>如果要看完整的效果，是要和后台项目 <strong><a href="https://github.com/biaochenxuying/blog-node" target="_blank" rel="noopener">blog-node</a></strong> 一起运行才行的，不然接口请求会失败。</p><h1 id="8-项目常见问题"><a href="#8-项目常见问题" class="headerlink" title="8. 项目常见问题"></a>8. 项目常见问题</h1><h2 id="8-1-管理员账号创建"><a href="#8-1-管理员账号创建" class="headerlink" title="8.1 管理员账号创建"></a>8.1 管理员账号创建</h2><p><img src="https://upload-images.jianshu.io/upload_images/12890819-67861a912768e646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>管理后台的登录账号并不是 admin/user ，也不是搭建 mongodb 数据库时创建的 user 用户，这里的账号和密码要自己创建，至于怎样创建呢？</p><h3 id="用-postman-调接口注册"><a href="#用-postman-调接口注册" class="headerlink" title="用 postman 调接口注册"></a>用 postman 调接口注册</h3><p>如果是本地的可以像这样子创建，如果是服务器上的，请把 url 修改一下，</p><p><img src="https://upload-images.jianshu.io/upload_images/12890819-3772744f72b8ed3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册"></p><ul><li><ol><li>url</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:3000/register</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>param<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;name&quot;: &quot;BiaoChenXuYing&quot;,</span><br><span class="line"> &quot;password&quot;: &quot;888888&quot;,</span><br><span class="line"> &quot;email&quot;: &quot;admin@qq.com&quot;,</span><br><span class="line"> &quot;phone&quot;: 1380013800,</span><br><span class="line"> &quot;type&quot;: 0,</span><br><span class="line"> &quot;introduce&quot;:&quot;加班到天明，学习到昏厥!!! 微信公众号：【 BiaoChenXuYing 】，分享 WEB 全栈开发等相关的技术文章，热点资源，全栈程序员的成长之路。&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>这里的 type 为 0 是管理员账号，为 1 时，是普通用户。</p><h2 id="8-2-端口"><a href="#8-2-端口" class="headerlink" title="8.2 端口"></a>8.2 端口</h2><p>本地开发时，blog-react 和 blog-node 默认启动的端口是相同的，都是 3000。<br><strong>所以要先启动 blog-node 项目，再启动 blog-react 项目，而且 blog-react 的端口用另外一个打开。</strong></p><h1 id="9-最后"><a href="#9-最后" class="headerlink" title="9. 最后"></a>9. 最后</h1><p>鉴于问问题的人有点多，小汪时间有限，处理不过来，大家可以加入 QQ 群：<strong>186045338</strong>，加群暗号：<strong>全栈修炼</strong> ，一起相互交流学习。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Dec 17 2018 15:06:53 GMT+0800 (CST) --&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12890819-f3b950acbffb
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>viewport-fit解决iPhone X、XS、XS Max、XR刘海屏问题</title>
    <link href="http://cansolve.github.io/2018/10/10/daily2/"/>
    <id>http://cansolve.github.io/2018/10/10/daily2/</id>
    <published>2018-10-10T03:28:29.000Z</published>
    <updated>2018-12-14T07:26:24.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Dec 17 2018 15:06:53 GMT+0800 (CST) --><h4 id="一次活动页面发现的iPhone-X、XS、XS-Max、XR刘海屏问题"><a href="#一次活动页面发现的iPhone-X、XS、XS-Max、XR刘海屏问题" class="headerlink" title="一次活动页面发现的iPhone X、XS、XS Max、XR刘海屏问题"></a>一次活动页面发现的iPhone X、XS、XS Max、XR刘海屏问题</h4><p>起因：游戏内嵌内嵌H5页面，提供的webview容器是全屏的，所以H5页面要处理以上设备的刘海问题【烦】。</p><p>尺寸了解我这里就不写了，尺寸问题我就不写了，<a href="https://blog.csdn.net/qq_33608748/article/details/82769570" target="_blank" rel="noopener">顶楼电梯</a></p><p>iPhone X 配备一个覆盖整个手机的全面屏,顶部的“刘海”突出来使得网站被限制在一个“安全区域”,在两侧边缘会出现白条儿。移除这个白条儿也不难,给 body 设置一个 background-color 就可以搞定。</p><p>但是我们内嵌的游戏页面背景色有时候不好设置背景色为纯色，另一种方法就是添加 viewport-fit=cover meta 标签,将整个网站扩展到整个屏幕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;</span><br></pre></td></tr></table></figure><p>iPhone XS等手机还未发布之前，我们也是跟着学做已经做一些兼容来搞定iPhoneX。</p><p>这里只是横屏代码，竖屏同理；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var isIPhoneX = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 375 &amp;&amp; window.screen.width === 812;</span><br></pre></td></tr></table></figure><p>这里我们判断如果是iPhone X，把顶部增加高度30px的容器垫高，避开刘海头区域，各种方式都可以padding-left、absolute、margin-left。。。你能想到的方法都可以，这样标题正好避开刘海头。</p><p>因为自己当时还没有用iPhone X，只知道iPhone X有刘海头，不知道其他细节问题。</p><p>又到一年一度的9月份，苹果发布了3X机系列，有同事在Mac下的iPhone模拟器访问，发现这个页面iPhone XS Max下有问题。看了一下上面文章发现尺寸不一样，当初只判断了iPhone X加垫高，其他几个机型都未判断，所以就很自然的写了新机型，加上判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// iPhone X、iPhone XS</span><br><span class="line">var isIPhoneX = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 375 &amp;&amp; window.screen.width === 812;</span><br><span class="line">// iPhone XS Max</span><br><span class="line">var isIPhoneXSMax = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 414 &amp;&amp; window.screen.width === 896;</span><br><span class="line">// iPhone XR</span><br><span class="line">var isIPhoneXR = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 2 &amp;&amp; window.screen.height === 414 &amp;&amp; window.screen.width === 896;</span><br></pre></td></tr></table></figure><p>原来代码是if(isIPhoneX)垫高，现在改成if(isIPhoneX || isIPhoneXSMax || isIPhoneXR)垫高。</p><p>这里有个坑，官方提供的安全区域代码constant(safe-area-inset-top) env(safe-area-inset-top)，使用后都在刘海头下面，如图（黑灰色区域状态栏）：</p><p><img src="http://ons.me/wp-content/uploads/2018/10/4.jpg" alt=""></p><p>当初没有用安全区域代码，一方面是因为页面有悬浮容器，会悬浮到安全区域外部，兼容页面正文麻烦，另一方面就是正文内容靠下，离刘海头有一段距离，感觉太丑干脆不用。</p><p>总结：依旧不用安全区域代码，如果要做刘海头，if(isIPhoneX || isIPhoneXSMax || isIPhoneXR) 垫高44px。</p><p>备注：iPhone X、iPhone XS、iPhone XS Max刘海头高度30px，iPhone XR刘海头高度33px。本文提到的30px、33px、44px，均为initial-scale=1下，px是在通用属性下，用rem写页面的请自行转换。设计稿像素应该都需要乘以2倍或3倍。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Dec 17 2018 15:06:53 GMT+0800 (CST) --&gt;&lt;h4 id=&quot;一次活动页面发现的iPhone-X、XS、XS-Max、XR刘海屏问题&quot;&gt;&lt;a href=&quot;#一次活动页面发现的iPhone-X、XS、XS-Ma
      
    
    </summary>
    
      <category term="个人" scheme="http://cansolve.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="移动端" scheme="http://cansolve.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo + github搭建自己的博客</title>
    <link href="http://cansolve.github.io/2018/04/02/daily1/"/>
    <id>http://cansolve.github.io/2018/04/02/daily1/</id>
    <published>2018-04-02T11:25:46.000Z</published>
    <updated>2018-12-14T07:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Dec 17 2018 15:06:53 GMT+0800 (CST) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>这是我第一次写这种类型的博客，也不叫什么博客，纯粹个人一些踩坑过程罢了，原先弄的前后端分离的开发流程想想太复杂，一个博客页面没啥必要，主要还是记录自己的一些心得，内容比较重要。话不多说，开搞！！！</p><h2 id="基于node和git"><a href="#基于node和git" class="headerlink" title="基于node和git"></a>基于node和git</h2><p>安装<a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js</a>和<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a><br>这个就不多说了，贴个地址</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a><strong>快速开始</strong></h2><p>1、找个文件夹下打开终端,输入</p><pre><code>hexo i blogName //blog是项目名cd blogName //切换到站点根目录hexo g //generetor的缩写hexo s //server的缩写</code></pre><p>2 打开浏览器输入localhost:4000查看：<br><img src="https://cansolve.cn/20161115143629057.jpg" alt="local" title="localhost:4000"></p><p>看到这个样子就说明成功了，这个就是hexo默认的博客主题。现在你已经可以在这个主题下写博客了。<br>你还可以选择博客的主题<a href="https://hexo.io/themes/" target="_blank" rel="noopener">theme</a></p><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a><strong>选择主题</strong></h2><p>我选的是Claudia</p><p>1 . 在站点根目录输入</p><pre><code>git clone https://github.com/Haojen/hexo-theme-Claudia.git</code></pre><p>2 . 完成后，打开根目录下的 _config.yml 文件， 找到 theme 字段，把landscape改为 Claudia<br><img src="https://cansolve.cn/2018112110001.png" alt="theme" title="theme"></p><p>3 . 在终端输入</p><pre><code>hexo clean  //清除缓存hexo g  //重新生成代码hexo s  //部署到本地//然后打开浏览器访问 localhost:4000 查看效果</code></pre><p><img src="https://cansolve.cn/201812110002.png" alt="theme" title="theme"><br>这时候主题已经换了，主题里面的修改项自行查阅一下，很多都有注释</p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a><strong>上传到github</strong></h2><p>没有github账号的，自行注册一个【很少人没有吧】</p><p><img src="https://cansolve.cn/201812110003.png" alt="theme" title="theme"><br>完了继续下一步选择一个主题</p><p><img src="https://cansolve.cn/201812110004.jpg" alt="theme" title="theme"><br>结束访问 xxxxx.github.io 会看到上面一样的页面</p><p>修改文件<br><img src="https://cansolve.cn/201812110005.png" alt="theme" title="theme"></p><pre><code>注意！！！冒号的后面一定一定一定要有一个空格！！</code></pre><p>开始部署</p><pre><code>npm install hexo-deployer-git --save//先装个插件hexo d  //  部署的命令</code></pre><p>网上有的教程说需要账号密码，我这边没遇到，所以就不方便截图了</p><h2 id="发布第一篇博客"><a href="#发布第一篇博客" class="headerlink" title="发布第一篇博客"></a><strong>发布第一篇博客</strong></h2><p>根目录下输入 ：</p><pre><code>hexo new &quot;postName&quot;//hexo n 也可以 //你自己的博客名称，名为postName.md的文件会建在目//录/blog/source/_posts下。</code></pre><p>文章编辑完成后，终端在根目录文件夹下，执行如下命令来发布:</p><pre><code>hexo g //生成静态页面，类似于打个包hexo d //发布</code></pre><p>这样就可以发布咯</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Dec 17 2018 15:06:53 GMT+0800 (CST) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/
      
    
    </summary>
    
      <category term="个人" scheme="http://cansolve.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="建站" scheme="http://cansolve.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>

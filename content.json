{"meta":{"title":"blog","subtitle":null,"description":"my blog","author":"tongxiang","url":"http://cansolve.github.io"},"pages":[{"title":"全部分类","date":"2018-12-13T08:13:11.000Z","updated":"2018-12-13T08:13:11.000Z","comments":false,"path":"categories/index.html","permalink":"http://cansolve.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-12-13T08:15:25.000Z","updated":"2018-12-13T08:15:25.000Z","comments":false,"path":"about/index.html","permalink":"http://cansolve.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"全部标签","date":"2018-12-13T08:13:04.000Z","updated":"2018-12-13T08:13:04.000Z","comments":false,"path":"tags/index.html","permalink":"http://cansolve.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"viewport-fit解决iPhone X、XS、XS Max、XR刘海屏问题","slug":"daily2","date":"2018-10-10T03:28:29.000Z","updated":"2018-12-14T07:26:24.000Z","comments":true,"path":"2018/10/10/daily2/","link":"","permalink":"http://cansolve.github.io/2018/10/10/daily2/","excerpt":"","text":"一次活动页面发现的iPhone X、XS、XS Max、XR刘海屏问题起因：游戏内嵌内嵌H5页面，提供的webview容器是全屏的，所以H5页面要处理以上设备的刘海问题【烦】。尺寸了解我这里就不写了，尺寸问题我就不写了，顶楼电梯iPhone X 配备一个覆盖整个手机的全面屏,顶部的“刘海”突出来使得网站被限制在一个“安全区域”,在两侧边缘会出现白条儿。移除这个白条儿也不难,给 body 设置一个 background-color 就可以搞定。但是我们内嵌的游戏页面背景色有时候不好设置背景色为纯色，另一种方法就是添加 viewport-fit=cover meta 标签,将整个网站扩展到整个屏幕1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, viewport-fit=cover&quot;&gt;iPhone XS等手机还未发布之前，我们也是跟着学做已经做一些兼容来搞定iPhoneX。这里只是横屏代码，竖屏同理；1var isIPhoneX = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 375 &amp;&amp; window.screen.width === 812;这里我们判断如果是iPhone X，把顶部增加高度30px的容器垫高，避开刘海头区域，各种方式都可以padding-left、absolute、margin-left。。。你能想到的方法都可以，这样标题正好避开刘海头。因为自己当时还没有用iPhone X，只知道iPhone X有刘海头，不知道其他细节问题。又到一年一度的9月份，苹果发布了3X机系列，有同事在Mac下的iPhone模拟器访问，发现这个页面iPhone XS Max下有问题。看了一下上面文章发现尺寸不一样，当初只判断了iPhone X加垫高，其他几个机型都未判断，所以就很自然的写了新机型，加上判断：123456// iPhone X、iPhone XSvar isIPhoneX = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 375 &amp;&amp; window.screen.width === 812;// iPhone XS Maxvar isIPhoneXSMax = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 3 &amp;&amp; window.screen.height === 414 &amp;&amp; window.screen.width === 896;// iPhone XRvar isIPhoneXR = /iphone/gi.test(window.navigator.userAgent) &amp;&amp; window.devicePixelRatio &amp;&amp; window.devicePixelRatio === 2 &amp;&amp; window.screen.height === 414 &amp;&amp; window.screen.width === 896;原来代码是if(isIPhoneX)垫高，现在改成if(isIPhoneX || isIPhoneXSMax || isIPhoneXR)垫高。这里有个坑，官方提供的安全区域代码constant(safe-area-inset-top) env(safe-area-inset-top)，使用后都在刘海头下面，如图（黑灰色区域状态栏）：当初没有用安全区域代码，一方面是因为页面有悬浮容器，会悬浮到安全区域外部，兼容页面正文麻烦，另一方面就是正文内容靠下，离刘海头有一段距离，感觉太丑干脆不用。总结：依旧不用安全区域代码，如果要做刘海头，if(isIPhoneX || isIPhoneXSMax || isIPhoneXR) 垫高44px。备注：iPhone X、iPhone XS、iPhone XS Max刘海头高度30px，iPhone XR刘海头高度33px。本文提到的30px、33px、44px，均为initial-scale=1下，px是在通用属性下，用rem写页面的请自行转换。设计稿像素应该都需要乘以2倍或3倍。","categories":[{"name":"个人","slug":"个人","permalink":"http://cansolve.github.io/categories/个人/"}],"tags":[{"name":"移动端","slug":"移动端","permalink":"http://cansolve.github.io/tags/移动端/"}]},{"title":"移动端滚动事件overflow-y:scroll使用心得","slug":"daily4","date":"2018-09-18T07:45:43.000Z","updated":"2018-12-18T08:06:30.332Z","comments":true,"path":"2018/09/18/daily4/","link":"","permalink":"http://cansolve.github.io/2018/09/18/daily4/","excerpt":"","text":"作者：夏大师https://www.cnblogs.com/xiahj/p/8036419.html1. -webkit-overflow-scrolling:touch是什么？MDN上是这样定义的：-webkit-overflow-scrolling属性控制元素在移动设备上是否使用滚动回弹效果.auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。在移动端上，在你用overflow-y:scorll属性的时候，你会发现滚动的效果很木，很慢，这时候可以使用-webkit-overflow-scrolling:touch这个属性，让滚动条产生滚动回弹的效果，就像ios原生的滚动条一样流畅。2. 解决safari布局抖动的例子想实现一个布局为header、main、bottom的布局，其中头部和底部通过fixed固定，中间部分通过滚动条滑动。如果目的是实现只要中间的内容超过屏幕高度时，中间内容会自动滚动的效果的话，main部分加上上下的padding，然后不需要自己添加任何滚动条属性，当超出高度时，body会自动产生滚动条。这样我们的目的其实是实现了的。但是在safari上，当超出高度，页面往下滑时，浏览器底部的工具栏会随着页面一起晃动（向下滚动时会拉起底部工具栏），造成了很不好的体验。所以我们想在中间的main部分加一个独立的滚动条。2.1 方案一在main上使用fixed定位，加上overflow-y属性。123456.main &#123; position: fixed; top: 50px; bottom: 50px; overflow-y: scroll;&#125;不过不推荐这个fixed方案，因为页面偶尔卡住不动，下面说到了这个问题。2.2 方案二中间的main不设定位，高度100%，再padding头部和尾部，其中头部和底部的定位设为absolute会比设为fixed体验更好（况且fix布局在移动端本来就有各种各样的问题，还是尽量避开:) ）。大致代码如下，仍是overflow-y和-webkit-overflow-scrolling，重点在于中间部分依照文本流布局。123456789html, body &#123; height: 100%;&#125;main &#123; padding: 50px 0; height: 100%; overflow-y: scroll; -webkit-overflow-scrolling: touch;&#125;3. 探究-webkit-overflow-scrolling:touch偶尔卡住或不能滑动的bug-webkit-overflow-scrolling:touch这个属性真的是各种坑，我研究这个属性已经大半年了，还没有发现能够在safari上完美使用无bug的例子。最常见的例子就是，在safari上，使用了-webkit-overflow-scrolling:touch之后，页面偶尔会卡住不动。在safari上，点击其他区域，再在滚动区域滑动，滚动条无法滚动的bug。通过动态添加内容撑开容器，结果根本不能滑动的bug。在网上也看到了一些人在问这个问题，不过不多，国外倒是讨论的更多一点，描述如下。偶尔卡住的问题，解决方案网上众说纷纭，遇到了很多相同的说法，比如如果卡住不动的话，就加一个z-index，就能解决该问题的说法。在试了很多次之后，这种说法没有一次解决过这个问题。这个说法能够传播出来，可能是使用者当时在使用的时候遇到了-webkit-overflow-scrolling:touch点透或者层级的问题。所以该方案不具有适用性。所以这个东西真的让我很苦恼了很久，以致于那段时间所有的滚动条不是通过body自己滚动，就是使用iScroll这样的库，繁琐地让我几乎想要放弃移动web，拥抱hybrid，不过在stackoverflow潜水了很久之后，总结了以下几种解决方案：3.1 保证使用了该属性的元素上没有设置定位如果出现偶尔卡住不动的情况，那么在使用该属性的元素上不设置定位或者手动设置定位为static1position: static这样会解决部分因为定位(relative、fixed、absolute)导致的页面偶尔不能滚动的bug。但是滑动到顶部继续手指往下滑，或者到底部继续往上滑，还是会触发卡住的问题（其实是整个页面上下回弹），说他算bug，其实就是ios8以上的特性，如果滚动区域大一点，用户不会觉得这是bug，如果小了，用户会不知道发生了什么而卡住了。视频在这，有梯子的同学可以看一看https://www.youtube.com/watch?v=MkAVYbO_joo。3.2 如果添加动态内容页面不能滚动，让子元素height+1如果在-webkit-overflow-scrolling:touch属性的元素上，想通过动态添加内容来撑开容器，触发滚动，是有bug 的，页面是会卡住不动的。国内没有人讨论这个问题，国外倒是很多，例如下面的描述：收集了很多资料，用了之后，下面的方法真正的解决了我的问题，真是直呼神奇，方案如下图：图一：图二：方法就是在webkit-overflow-scrolling:touch属性的下一层子元素上，将height加1%或1px。从而主动触发scrollbar。123main-inner &#123; min-height: calc(100% + 1px)&#125;你也可以直接加伪元素上：123main:after &#123; min-height: calc(100% + 1px)&#125;这个方案不得不说真的好用。。当然还有其他方案，不过要写js或者jq了，麻烦。3.3 为什么会有卡住不动的这个bug这个bug产生于ios8以上（不十分肯定，但在ios5~7上需要手动使用translateZ(0)打开硬件加速）Safari对于overflow-scrolling用了原生控件来实现。对于有-webkit-overflow-scrolling的网页，会创建一个UIScrollView，提供子layer给渲染模块使用。我想说作为一个苦逼的前端只能解决到这了。4. -webkit-overflow-scrolling:touch的其他坑除此之外，这个属性还有很多bug，包括且不限于以下几种：滚动中 scrollTop 属性不会变化手势可穿过其他元素触发元素滚动滚动时暂停其他 transition","categories":[{"name":"分享","slug":"分享","permalink":"http://cansolve.github.io/categories/分享/"}],"tags":[{"name":"移动端","slug":"移动端","permalink":"http://cansolve.github.io/tags/移动端/"}]},{"title":"基于react + bootstrap 的 react-admin","slug":"daily3","date":"2018-09-14T07:52:19.000Z","updated":"2018-12-18T09:16:49.973Z","comments":true,"path":"2018/09/14/daily3/","link":"","permalink":"http://cansolve.github.io/2018/09/14/daily3/","excerpt":"","text":"前言此 react-admin 项目是基于 bootstrap-ace 框架之上，用 react 全家桶 + bootstrap 的进行再次开发的，项目已经开源，项目地址在 github 上。框架效果预览 http://www.pydyun.com/other/ace/index.htmlgithub地址 github1. 后台管理主要项目结构123456789101112131415161718192021222324demo //项目名 -- dist //预编译，自动构建之后会生成的文件，默认初始化是没有当前这个文件 -- asserts //静态资源目录，css,font,image -- public //html模板文件 -- webpack //webpack配置文件 -- webpack.base.config.js //公用 -- webpack.dev.config.js //开发环境 -- webpack.prod.config.js //生产环境 -- src //js编写文件 -- index.js // 初始化js -- module // 基础UI模块目录 -- tools // js方法工具库目录 -- action // action 目录 -- component // 对应的模块 目录 -- dispatch // dispatch 目录 -- reducers // reducers 目录 -- index.js // 前端渲染 -- router.js // 前端路由 -- store.js // store 文件 -- .babelr //babel的校验文件 -- .eslintrc //js编写校验配置文件 -- .gitignore //git过滤文件 -- package.json //node 安装包文件 -- README.md //readme 文件2. 本地必须要有node和git环境webpack 4bootstrap + acereact 16react-router 4redux 3babelpromiseasync + await3. 项目开始先在对应的git先创建git仓库，比如：XX管理后台 demo 项目，然后 git clone 到本来的开发环境，进入当前项目目录，代码如入：12git clone ssh://git@github.com:cansolve/react-manage.gitcd demo或者12cd demogit remote add origin ssh://git@github.com:cansolve/react-manage.git这时，通过git来添加前端开发初始化的工程目录，代码如下：12git remote add base ssh://git@github.com:cansolve/react-manage.gitgit pull base master --allow-unrelated-histories然后可以推送到开发项目上面去，代码如下：123git add .git commit -m &apos;前端项目初始化&apos;git push origin demo到此，你的 demo 项目前端搭建和初始化已完毕，接下来你就可以开始 前端开发 了4. 本地项目开始先安装编译第三方的依赖包1npm install123//如果开发之前本地没有对应的server服务器，也可以用node搭个server服务器，默认是8080端口:127.0.0.1:8080,如果有的话，直接跳过这一步npm install -g http-serverhttp-server -c-14.1 开发环境生产环境中开发监听对应的文件修改1npm run start4.2 生产环境压缩生产对应的线上文件，生产 html css image font js 文件1npm run build4.3 前端的升级和更新后续当前项目的前端库升级，bug修复，版本更新，直接可以通过命令来实现1git pull base master如有改动跟本地开发的导致冲突，请手动处理冲突文件，然后push到对应项目中去。5. 项目组建介绍5.1 表格组建说明：这里表格已经写成组建形式，只需要传入对应的title及data 后台获取数据 即可渲染成表格，对应的可以选择排序、勾选、包括给详情加a标签功能;5.2 分页组建说明：分页组建，点击传入对应页码，支持输入跳转;5.3 日历组建说明：日历时间选择组建，点击展示日期列表，选择传给后台为时间戳格式;5.4 下拉选择组建说明：点击出现下拉框，支持搜索功能5.4 下拉选择【多选】组建说明：点击出现下拉框，多选功能5.4 树组建说明：传入对应的数据即可渲染成树5.4 双向选择组建说明：两边数据可以互通选择，支持一键全部选择，两边数据都支持搜索功能；具体使用api在组建里面已经写的比较详细，类似下图，再有不明白的可以联系我，一起进步；5. 最后因为这是本人自己依据creat-react-app搭建的，跟公司项目目录还是有一定区别的，包括本人写代码的一些不好的地方还请多指正。大神请绕道，放小弟一条生路，谢谢啦！！本人公众号 码上关注 不定期分享一些前端知识，一起相互交流学习。","categories":[{"name":"个人","slug":"个人","permalink":"http://cansolve.github.io/categories/个人/"}],"tags":[{"name":"react","slug":"react","permalink":"http://cansolve.github.io/tags/react/"}]},{"title":"用Hexo + github搭建自己的博客","slug":"daily1","date":"2018-04-02T11:25:46.000Z","updated":"2018-12-14T07:27:02.000Z","comments":true,"path":"2018/04/02/daily1/","link":"","permalink":"http://cansolve.github.io/2018/04/02/daily1/","excerpt":"","text":"前言这是我第一次写这种类型的博客，也不叫什么博客，纯粹个人一些踩坑过程罢了，原先弄的前后端分离的开发流程想想太复杂，一个博客页面没啥必要，主要还是记录自己的一些心得，内容比较重要。话不多说，开搞！！！基于node和git安装node.js和git这个就不多说了，贴个地址快速开始1、找个文件夹下打开终端,输入hexo i blogName //blog是项目名 cd blogName //切换到站点根目录 hexo g //generetor的缩写 hexo s //server的缩写 2 打开浏览器输入localhost:4000查看：看到这个样子就说明成功了，这个就是hexo默认的博客主题。现在你已经可以在这个主题下写博客了。你还可以选择博客的主题theme选择主题我选的是Claudia1 . 在站点根目录输入git clone https://github.com/Haojen/hexo-theme-Claudia.git 2 . 完成后，打开根目录下的 _config.yml 文件， 找到 theme 字段，把landscape改为 Claudia3 . 在终端输入hexo clean //清除缓存 hexo g //重新生成代码 hexo s //部署到本地 //然后打开浏览器访问 localhost:4000 查看效果 这时候主题已经换了，主题里面的修改项自行查阅一下，很多都有注释上传到github没有github账号的，自行注册一个【很少人没有吧】完了继续下一步选择一个主题结束访问 xxxxx.github.io 会看到上面一样的页面修改文件注意！！！冒号的后面一定一定一定要有一个空格！！ 开始部署npm install hexo-deployer-git --save //先装个插件 hexo d // 部署的命令 网上有的教程说需要账号密码，我这边没遇到，所以就不方便截图了发布第一篇博客根目录下输入 ：hexo new &quot;postName&quot; //hexo n 也可以 //你自己的博客名称，名为postName.md的文件会建在目 //录/blog/source/_posts下。 文章编辑完成后，终端在根目录文件夹下，执行如下命令来发布:hexo g //生成静态页面，类似于打个包 hexo d //发布 这样就可以发布咯","categories":[{"name":"个人","slug":"个人","permalink":"http://cansolve.github.io/categories/个人/"}],"tags":[{"name":"建站","slug":"建站","permalink":"http://cansolve.github.io/tags/建站/"}]}]}